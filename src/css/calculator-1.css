/* One way cascading style sheets (CSS) can be applied to HTML is by
assigning classes to HTML elements [e.g., <input class="classNameHere">].
It's essentially an object oriented approach. This is the approach I'm taking
for the calculator. I already assigned classes to the relevant HTML elements,
so all that we have to do is edit the style sets for those classes, which are
below. The "." indicates that this style set is for a class, and the
word(s) to the right of the "." is the actual class name assigned in the
HTML of the webpage. I tried to make the class names as clear a possible
so that we don't have to look at the HTML at all, so the class names should
tell you what you're styling on the HTML/JavaScript calculator.

Note: there is a hierarchy of sorts since there can be multiple classes per
element. The most specific class will take precedence over all prior classes.
For instance, .one > .number > .key, at least I think.


Note: I commented out a lot of other options that are available. This is
intentional. It's just good to be aware of all our options. */

/* Google has an API through which free web fonts can be accessed.
see: https://www.w3schools.com/howto/howto_google_fonts.asp for details.
To use, need to go into HTML in <header> section and add a <link> element
to the font you want to use:
<link href="http://fonts.googleapis.com/css?family=Sofia" rel="stylesheet">
. Then, for the font-family attribute in a CSS set, just provide the font name
in quotes, e.g., 'Sofia' .
 */



/* Note: pretty much any attribute can be used for any class. Just pointing
this out since I haven't listed every attribute for each class */

.page-background {
	background-color: rgb(0, 0, 0);  /* leave this here not matter what you do for
	background: it lessnes the blinding whiteflash that occurs when a new page loads */

	/* background-image: linear-gradient(to bottom, orange, yellow, rgb(20, 20, 20)); */

/* images go into imgs folder and can be accessed as so: */
	background-image: url("../../imgs/milky-way-pixbay.jpg");
	background-repeat: no-repeat;
	background-size: 1000px;
	background-position: top center;
}

.header {
	background-color: white;
	font-family: sans-serif;;  /* one of the Google fonts */
	color: black;
	font-size: 22px;
	width: 70%;
	border: 2px;
	border-style: solid;
}

.prompt-box {
	background-color: white;
	font-family: sans-serif;
	color: black;
	font-size: 14px;
	width: 80%;
	border: 5px;
	border-style: solid;
}




.calculator-background {
	background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(100, 100, 100, 0.6));
	border-radius: 20px;
	border-style: ridge;
	border-color: black;
}

.calculator-display {
	background-color: rgba(255, 255, 255, 0.5);
	/* background-image: linear-gradient(to bottom, orange, yellow, rgb(20, 20, 20)); */
	color: white;  /* text color */
	text-align: right;
	border-width: 4px;
	border-color: black;
	border-radius: 20px;
	border-style: solid;
	font-family: 'Gugi';
	font-size: 22px;
	padding: 8px;
}

.key {
	/* background-color: gray; */
	background-color: rgba(255, 255, 255, 0.80);
	/* background-image: linear-gradient(to bottom, red, black, rgb(0, 255, 255)); */
	/* background-image: url("../../imgs/milky-way-pixbay.jpg"); */
	color: black;  /* text color */
	text-align: center;
	border-width: 2px;
	border-color: black;
	border-radius: 15px;
	font-family: 'Gugi';
	font-size: 16px;
	padding: 12px;
}

/* These are just two simple feedback things for the keys. When the cursor
hovers over a key, it'll style that key as so in .key:hover. When a key is
clicked, it will style as son in .key:active. Note, these are not permanent
changes; will revert back to the orignal style after stop hovering or after
click */

.key:active {
	box-shadow: 0 0 8px 8px rgba(255, 255, 255, 0.4);
}
.key:focus {
	outline: 0;
}




/* The next few style sets are for different kinds of keys. Note, pretty much
all of the same attributes from the .key styling also apply here AND will be
used unless replaced in one of the below sets. */

/* this is for styling the function keys like sqrt, ln, exp, and so on*/
.function {
	color: purple;
}

/* this is for styling the symbol keys like (, ., +, -, and so on */
.symbol {
	/* background-color: rgba(23, 214, 45, 0.5); */
	color: rgb(130, 130, 130);
}

/* this is for styling the number eys, 0 through 9 */
.number {
	/* background-color: blue; */
}

/* this is for styling the utility keys: clear, backspace, enter */
.utility {
	/* background-color: orange; */

}

/* these are for editing the individual keys, which is unnecessary, but if
you really wanted to make an ugly interface, you could make each key different. */

/* .exp{}
.ln{}
.sqrt{}
.sq{}
.lparen{}
.clear{}
.seven{}
.four{}
.one{}
.cos{}
.eight{}
.five{}
.two{}
.decimal{}
.sin{}
.backspace{}
.nine{}
.six{}
.three{}
.plusSlashMinus{}
.tan{}
.divide{}
.multiply{}
.minus{}
.plus{}
.rparen{}  */
.enter{ font-size: 25;}
